# -*- coding: utf-8 -*-
"""Tratar Valores Vazios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eesr6fY1ZJvSW_2Dv0_GqeAGFOZb68RI
"""

#import libraries 
import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt

url='https://github.com/Diegojfsr/RNA_Trabalho_Pratico_I/blob/main/test.csv?raw=true'
test = pd.read_csv(url)
url='https://github.com/Diegojfsr/RNA_Trabalho_Pratico_I/blob/main/train.csv?raw=true'
train = pd.read_csv(url)

#recarregar o Dataframe substituido os valores que contenham "?", "!","-", "+" entre outros
train = train({"?": np.nan, "!" : np.nan})

display(train) # Exibe o Dataframe

print(train.info()) # Exibe Informações do Dataframe

### Trata a coluna que tenha numeros, mas que não estao sendo reconhecidos como valores numericos.
train["idpassager"] = pd.to_numeric(train["idpassager"], errors="coerce") # errors="coerce" //trata os valores que durante a conversao deram erro, deixando como vazios os espaços.

#print(train.isna().any()) # Exibe como True ou False os valores do Dataframe
print(train.isna().sum()) # Exibe a soma dos valores no Dataframe

####Removendo Valores Vazios
# 0 : exclui linhas
# 1 : exclui colunas
# any : exclui onde tenha pelo menos 1 item vazio
# all : exclui onde tenha pelo menos 1 item vazio

train = train.dropna(how="any", axis=0)

#### Tratando valores vazios
# Preenchendo com a media

media = train["idpassager"].mean()
train["idpassager"] = train["idpassager"].fillna(media)
display(train)

#### Tratando valores vazios
# Preenchendo com valores anteriores / posteriores

train["idpassager"] = train["idpassager"].fillna(method="ffill") # preenche com valor anterior
train["idpassager"] = train["idpassager"].fillna(method="bfill") # preenche com valor posterior
display(train)

#### Tratando valores vazios
# Preenchendo com valores com interpolação

train["idpassager"] = train["idpassager"].interpolate()
display(train)